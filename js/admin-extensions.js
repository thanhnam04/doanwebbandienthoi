// Th√™m v√†o admin.js - ch·ª©c nƒÉng in h√≥a ƒë∆°n
function printInvoice(orderId) {
    const token = localStorage.getItem('userToken'); // S·ª¨A: userToken
    
    fetch(`http://localhost:3001/api/invoice/orders/${orderId}/invoice`, { // S·ª¨A: 3001
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(r => r.text())
    .then(html => {
        const newWindow = window.open('', '_blank');
        newWindow.document.write(html);
        newWindow.document.close();
    })
    .catch(err => {
        console.log('‚ùå Error:', err);
        alert('L·ªói khi in h√≥a ƒë∆°n!');
    });
}

// Th√™m v√†o admin.js - filter ƒë∆°n h√†ng theo ng√†y
function filterOrdersByDate() {
    const fromDate = document.getElementById('fromDate').value;
    const toDate = document.getElementById('toDate').value;
    
    let url = 'http://localhost:3000/api/admin/orders';
    const params = new URLSearchParams();
    
    if (fromDate) params.append('from', fromDate);
    if (toDate) params.append('to', toDate);
    
    if (params.toString()) {
        url += '?' + params.toString();
    }
    
    const token = localStorage.getItem('token');
    
    fetch(url, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(orders => {
        displayFilteredOrders(orders);
    })
    .catch(error => {
        console.error('Error filtering orders:', error);
        alert('L·ªói khi l·ªçc ƒë∆°n h√†ng!');
    });
}

function displayFilteredOrders(orders) {
    const ordersContainer = document.getElementById('ordersContainer');
    if (!ordersContainer) return;
    
    let html = `
        <div class="filter-section" style="margin-bottom: 20px; padding: 15px; background: #f5f5f5; border-radius: 5px;">
            <h4>L·ªçc ƒë∆°n h√†ng theo ng√†y:</h4>
            <div style="display: flex; gap: 15px; align-items: center;">
                <div>
                    <label>T·ª´ ng√†y:</label>
                    <input type="date" id="fromDate" style="margin-left: 5px;">
                </div>
                <div>
                    <label>ƒê·∫øn ng√†y:</label>
                    <input type="date" id="toDate" style="margin-left: 5px;">
                </div>
                <button onclick="filterOrdersByDate()" class="btn btn-primary">L·ªçc</button>
                <button onclick="loadAllOrders()" class="btn btn-secondary">T·∫•t c·∫£</button>
            </div>
        </div>
        <div class="orders-list">
    `;
    
    if (orders.length === 0) {
        html += '<p>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o trong kho·∫£ng th·ªùi gian n√†y.</p>';
    } else {
        orders.forEach(order => {
            html += `
                <div class="order-card" style="border: 1px solid #ddd; margin-bottom: 15px; padding: 15px; border-radius: 5px;">
                    <div class="order-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <h5>ƒê∆°n h√†ng #${order.id}</h5>
                        <div>
                            <button onclick="printInvoice(${order.id})" class="btn btn-info btn-sm" style="margin-right: 5px;">
                                üìÑ In h√≥a ƒë∆°n
                            </button>
                            <button onclick="approveOrder(${order.id})" class="btn btn-success btn-sm" style="margin-right: 5px;">
                                ‚úÖ Duy·ªát
                            </button>
                            <button onclick="cancelOrder(${order.id})" class="btn btn-danger btn-sm">
                                ‚ùå H·ªßy
                            </button>
                        </div>
                    </div>
                    <div class="order-info">
                        <p><strong>Kh√°ch h√†ng:</strong> ${order.fullname}</p>
                        <p><strong>ƒêi·ªán tho·∫°i:</strong> ${order.phone}</p>
                        <p><strong>T·ªïng ti·ªÅn:</strong> ${formatPrice(order.total_amount)}</p>
                        <p><strong>Tr·∫°ng th√°i:</strong> <span class="status-${order.status}">${order.status}</span></p>
                        <p><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date(order.created_at).toLocaleDateString('vi-VN')}</p>
                    </div>
                </div>
            `;
        });
    }
    
    html += '</div>';
    ordersContainer.innerHTML = html;
}

// Th√™m ch·ª©c nƒÉng duy·ªát v√† h·ªßy ƒë∆°n h√†ng v·ªõi qu·∫£n l√Ω kho
function approveOrder(orderId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën duy·ªát ƒë∆°n h√†ng n√†y? S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho s·∫Ω b·ªã gi·∫£m.')) {
        return;
    }
    
    const token = localStorage.getItem('token');
    
    fetch(`http://localhost:3000/api/inventory/orders/${orderId}/approve`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert('L·ªói: ' + data.error);
        } else {
            alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c duy·ªát v√† kho h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');
            loadAllOrders(); // Reload orders
        }
    })
    .catch(error => {
        console.error('Error approving order:', error);
        alert('L·ªói khi duy·ªát ƒë∆°n h√†ng!');
    });
}

function cancelOrder(orderId) {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng n√†y?')) {
        return;
    }
    
    const token = localStorage.getItem('token');
    
    fetch(`http://localhost:3000/api/inventory/orders/${orderId}/cancel`, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            alert('L·ªói: ' + data.error);
        } else {
            alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy!');
            if (data.stockRestored && data.stockRestored.length > 0) {
                alert('Kho h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£!');
            }
            loadAllOrders(); // Reload orders
        }
    })
    .catch(error => {
        console.error('Error cancelling order:', error);
        alert('L·ªói khi h·ªßy ƒë∆°n h√†ng!');
    });
}

function loadAllOrders() {
    // Reset date filters
    document.getElementById('fromDate').value = '';
    document.getElementById('toDate').value = '';
    
    // Load all orders without date filter
    filterOrdersByDate();
}

function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', {
        style: 'currency',
        currency: 'VND'
    }).format(price);
}